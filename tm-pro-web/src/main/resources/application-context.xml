<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/data/elasticsearch
       http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd ">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/mysql.properties</value>
			</list>
		</property>
	</bean>


	<bean id="scheduler" lazy-init="false" scope="singleton"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />
	<!-- 任务管理器 -->
	<bean class="org.tm.pro.web.quartz.manager.JobManager">
		<property name="scheduler" ref="scheduler"></property>
	</bean>

	<!--扫描包进行注入 -->
	<context:component-scan base-package="org.tm.pro.mapper" />
	<context:component-scan base-package="org.tm.pro.service.impl" />
	<!-- Jobs -->
	<context:component-scan base-package="org.tm.pro.web.quartz.job.impl" />

	<bean id="baseDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="initialPoolSize" value="${db.initialPoolSize}"></property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${db.maxIdleTime}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${db.maxPoolSize}"></property>
		<property name="minPoolSize" value="${db.minPoolSize}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${db.acquireIncrement}"></property>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${db.acquireRetryDelay}"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"></property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"></property>
	</bean>

	<!-- 数据库连接池管理 -->
	<bean id="masterDb" parent="baseDataSource">
		<property name="driverClass" value="${db.master.driverClass}"></property>
		<property name="jdbcUrl" value="${db.master.jdbcUrl}"></property>
		<property name="user" value="${db.master.user}"></property>
		<property name="password" value="${db.master.password}"></property>
	</bean>
	<bean id="slaveDb" parent="baseDataSource">
		<property name="driverClass" value="${db.slave.driverClass}"></property>
		<property name="jdbcUrl" value="${db.slave.jdbcUrl}"></property>
		<property name="user" value="${db.slave.user}"></property>
		<property name="password" value="${db.slave.password}"></property>
	</bean>
	
	<bean id="manyDataSource" class="org.tm.pro.holder.CustomerRoutingDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDb" />
				<entry key="slave" value-ref="slaveDb" />
			</map>
		</property>
		<!-- 默认数据源 -->
		<property name="defaultTargetDataSource" ref="masterDb" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="manyDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="typeAliasesPackage" value="org.tm.pro.entity" />
		<property name="mapperLocations" value="classpath*:**/xml/*Mapper.xml" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							helperDialect=mysql
							reasonable=true
							supportMethodsArguments=true
							params=count=countSql
							autoRuntimeDialect=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- 配置扫描Mapper接口的包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.tm.pro.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- ================================事务相关控制================================================= -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="manyDataSource"></property>
	</bean>

	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- PROPAGATION_REQUIRED: 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。 -->
			<tx:method name="del*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--把事务控制在Service层 -->
		<aop:pointcut id="pc" expression="execution(public * org.tm.pro.service.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>
	
	<bean id="manyDataSourceAspect" class="org.tm.pro.holder.ManyDataSourceAspect" />
	<aop:config>
		<aop:aspect id="cds" ref="manyDataSourceAspect">
			<aop:pointcut id="tx" expression="execution(public * org.tm.pro.service.*.*(..))" />
			<aop:before pointcut-ref="tx" method="switchDB" />
		</aop:aspect>
	</aop:config>

</beans>